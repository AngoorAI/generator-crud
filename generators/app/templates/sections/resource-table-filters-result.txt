import React, { useCallback } from "react"
import Stack, { StackProps } from "@mui/material/Stack"
import Chip from "@mui/material/Chip"
import Paper from "@mui/material/Paper"
import Button from "@mui/material/Button"
import Iconify from "@/minimal/components/iconify"
import { Box } from "@mui/material"
import {
  <%= resourceName %>,
  <%= resourceName %>TableFilters,
  <%= resourceName %>TableFilterValue
} from "@/types/<%= resourceNameSnakeCase %>"

// ----------------------------------------------------------------------

type Props = StackProps & {
  filters: <%= resourceName %>TableFilters
  onFilters: (name: string, value: <%= resourceName %>TableFilterValue) => void
  onResetFilters: VoidFunction
  results: number
}

type BlockProps = {
  label: string
  children: React.ReactNode
  sx?: any
}

function Block({ label, children, sx, ...other }: BlockProps) {
  return (
    <Stack
      component={Paper}
      variant="outlined"
      spacing={1}
      direction="row"
      sx={{
        p: 1,
        borderRadius: 1,
        overflow: "hidden",
        borderStyle: "dashed",
        ...sx
      }}
      {...other}>
      <Box
        component="span"
        sx={{ typography: "subtitle2" }}>
        {label}
      </Box>

      <Stack
        spacing={1}
        direction="row"
        flexWrap="wrap">
        {children}
      </Stack>
    </Stack>
  )
}

export default function <%= resourceName %>TableFiltersResult({
  filters,
  onFilters,
  onResetFilters,
  results,
  ...other
}: Props) {
    
  const handleRemoveKeyword = useCallback(() => {
    onFilters("name", "")
  }, [onFilters])

  return (
    <Stack
      spacing={1.5}
      {...other}>
      <Box sx={{ typography: "body2" }}>
        <strong>{results}</strong>
        <Box
          component="span"
          sx={{ color: "text.secondary", ml: 0.25 }}>
          results found
        </Box>
      </Box>

      <Stack
        flexGrow={1}
        spacing={1}
        direction="row"
        flexWrap="wrap"
        alignItems="center">
        {!!filters.name && (
          <Block label="Keyword:">
            <Chip
              variant="soft"
              label={filters.name}
              size="small"
              onDelete={handleRemoveKeyword}
            />
          </Block>
        )}

        <Button
          color="error"
          onClick={onResetFilters}
          startIcon={<Iconify icon="solar:trash-bin-trash-bold" />}>
          Clear
        </Button>
      </Stack>
    </Stack>
  )
}
