import React, { useMemo } from "react";
import { FieldErrors, useForm } from "react-hook-form";
import { <%= resourceName %> } from "@/types/<%= resourceNameKebabCase %>";
import { <%= resourceName %>Client } from "@/services/<%= resourceNameKebabCase %>-client";
import { enqueueSnackbar } from "notistack";
import FormProvider from "@/minimal/components/hook-form/form-provider";
import { yupResolver } from "@hookform/resolvers/yup";
import <%= resourceNameLowerCamelCase %>Schema from "@/schemas/<%= resourceNameKebabCase %>";
import { paths } from "@/routes/paths";
import CustomBreadcrumbs from "@/minimal/components/custom-breadcrumbs";
import { FormActions, FormBody } from "./sections";
import { useRouter } from "next/navigation"

// ----------------------------------------------------------------------

type Props = {
  current<%= resourceName %>?: <%= resourceName %>;
};

export default function <%= resourceName %>NewEditForm({ current<%= resourceName %> }: Props) {
  const defaultValues = useMemo(() => {
    return current<%= resourceName %> || { id: "", name: "" };
  }, [current<%= resourceName %>]);

  const methods = useForm<<%= resourceName %>>({
    // @ts-ignore
    resolver: yupResolver<<%= resourceName %>>(<%= resourceNameLowerCamelCase %>Schema),
    defaultValues,
    mode: "onTouched",
  });

  const { handleSubmit } = methods;

  const { router } = useRouter()

  const onSubmit = async (data: <%= resourceName %>) => {
    try {
      if (current<%= resourceName %>) {
        await <%= resourceName %>Client.update(current<%= resourceName %>.id, data)
        enqueueSnackbar("Update Success", { variant: "success" })
      } else {
        await <%= resourceName %>Client.create(data)
        enqueueSnackbar("Create Success", { variant: "success" })
      }

      router.push(<%= resourcePath %>.root)
    } catch (error) {
      const errorMessage = current<%= resourceName %>
        ? "Update Failed"
        : "Create Failed"
      enqueueSnackbar(errorMessage, { variant: "error" })
    }
  };

  const onError = (errors: FieldErrors<<%= resourceName %>>) => {
    console.log("Form errors", errors);
    enqueueSnackbar("Please check the form", { variant: "error" });
  };

  const heading = current<%= resourceName %> ? "Edit" : "Create";

  return (
    <FormProvider
      methods={methods}
      onSubmit={handleSubmit(onSubmit, onError)}>
      <CustomBreadcrumbs
        heading={`${heading} <%= resourceName %>`}
        links={[
          {
            name: "All <%= resourceNameInWords %>",
            href: <%= resourcePath %>.root
          },
          {
            name: `${heading} <%= resourceName %>`,
            href: current<%= resourceName %> ? <%= resourcePath %>.edit(current<%= resourceName %>.id) : <%= resourcePath %>.new
          }
        ]}
        action={<FormActions />}
      />
      <FormBody />
    </FormProvider>
  );
}